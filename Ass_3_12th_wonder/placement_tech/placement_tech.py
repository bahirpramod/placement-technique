# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PlacementTech
                                 A QGIS plugin
 PlacementTech
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-12
        git sha              : $Format:%H$
        copyright            : (C) 2024 by xyz
        email                : xyz@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.core import *
from qgis.utils import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from qgis.core import *
import os.path
from qgis.gui import QgsMapTool, QgsRubberBand, QgsVertexMarker,QgsMapToolEmitPoint
import  math
import processing

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .placement_tech_dialog import PlacementTechDialog


class PlacementTech:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PlacementTech_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Placement Tech')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Additional attributes for line creation
        self.point_layer = None
        self.line_layer = None
        self.start_point = None
        self.map_tool = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API."""
        return QCoreApplication.translate('PlacementTech', message)

    def add_action(self, icon_path, text, callback, enabled_flag=True, add_to_menu=True, add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/placement_tech/icon.png'
        self.add_action(icon_path, text=self.tr(u'Placement tech'), callback=self.run, parent=self.iface.mainWindow())
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Placement Tech'), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        if self.first_start:
            self.first_start = False
            self.dlg = PlacementTechDialog()
            self.dlg.Start.clicked.connect(self.mode)
            self.dlg.offset.clicked.connect(self.create_offset)
            self.dlg.Enter.clicked.connect(self.fixed_legth)

        # show the dialog
        self.dlg.show()
        # self.dlg.setWindowFlags(self.dlg.windowFlags() | QtCore.Qt.WindowStaysOnTopHint)
        self.add_layers()
        # self.pntmode()

        # Run the dialog event loop
        result = self.dlg.exec_()
        if result:
            pass

    def close(self):
        self.dlg.close()

    def add_layers(self):
        layers = QgsProject.instance().mapLayers().values()
        # self.dlg.comboBox.clear()
        # self.dlg.comboBox_2.clear()
        # self.dlg.comboBox.addItems([layer.name() for layer in layers])
        
        """Get the existing layers named 'point_layer' and 'line_layer'."""
        
        self.point_layer = None
        self.line_layer = None
        for layer in layers:
            if layer.name() == 'point_layer':
                self.point_layer = layer
            elif layer.name() == 'line_layer':
                self.line_layer = layer

        if not self.point_layer:
            QMessageBox.information(self.dlg, "Info", "Layer 'point_layer' not found.")
        if not self.line_layer:
            QMessageBox.information(self.dlg, "Info", "Layer 'line_layer' not found.")

    def fixed_legth (self):# Usage
        loffset = float(self.dlg.userinput.text())
        d = QgsDistanceArea()
        crs = self.line_layer.crs()
        # crs = QgsCoordinateReferenceSystem()
        # crs.createFromId(3857, QgsCoordinateReferenceSystem.EpsgCrsId)
        context = QgsCoordinateTransformContext()
        d.setSourceCrs(crs, context)
        d.setEllipsoid('WGS84')
        distance = d.convertLengthMeasurement(float(loffset), QgsUnitTypes.DistanceDegrees)
        self.iface.mapCanvas()
       

        # Set up the tool
        # Usage example:
        iface = self.iface  # Get QGIS interface
        line_layer = iface.activeLayer()  # Assumes the user has selected the line layer
        tool = LineCreationTool(iface, line_layer)
        tool.set_distance(distance)  # Set the distance input by the user
        self.iface.mapCanvas().setMapTool(tool)

        
        
        

    def mode(self):
        self.name = self.dlg.comboBox.currentText()
        print(self.name)
        if self.name=="From Point Mode":
            """Set up point mode for capturing line endpoints."""
            if not self.point_layer or not self.line_layer:
                return

            count = self.point_layer.selectedFeatureCount()
            if count <= 0:
                QMessageBox.information(self.dlg, "Info", "Please select a feature from 'point_layer'.")
                return
            self.activate_map_tool()
        if self.name=="Standard Mode":
            self.activate_map_tool2()
           
            

    def activate_map_tool(self):
        """Activates the map tool to capture point clicks on the canvas."""
        self.map_tool = PointMultiLineTool(self.iface,self.iface.mapCanvas(), self.line_layer, self.point_layer)
        self.iface.mapCanvas().setMapTool(self.map_tool)
    def activate_map_tool2(self):
        """Activates the map tool to capture point clicks on the canvas."""
        self.map_tool = StdMultiLineTool(self.iface.mapCanvas(), self.line_layer)
        self.iface.mapCanvas().setMapTool(self.map_tool)
    
    def create_offset(self):
        # Get the active layer and check if it is a line layer
        
        iface=self.iface
        layer = iface.activeLayer()
        if not layer or layer.geometryType() != QgsWkbTypes.LineGeometry:
            iface.messageBar().pushCritical("Error", "Please select a line layer.")
            return

        # Get selected features
        selected_features = layer.selectedFeatures()
        if not selected_features:
            iface.messageBar().pushCritical("Error", "No features selected.")
            return
        
        # Show custom dialog to get distance and both sides option
        dialog = OffsetDialog()
        
        
        if not dialog.exec_():
            return
        distance_mm = dialog.get_distance()
        both_sides = dialog.is_both_sides()
        d = QgsDistanceArea()
        crs = layer.crs()
        # crs = QgsCoordinateReferenceSystem()
        # crs.createFromId(3857, QgsCoordinateReferenceSystem.EpsgCrsId)
        context = QgsCoordinateTransformContext()
        d.setSourceCrs(crs, context)
        d.setEllipsoid('WGS84')
        distance = d.convertLengthMeasurement(float(distance_mm), QgsUnitTypes.DistanceDegrees)
        # distance = distance_mm / 100000.0
        print("distance",distance)
        
        # Ensure layer is editable
        layer.startEditing()
        
        
        
        for feature in selected_features:
            if distance :
                # create the new feature from the selection
                pr1 = layer.dataProvider()
                layer.startEditing()
                
                for feature in layer.selectedFeatures():
                    geom = feature.geometry()
                    # nline = geom.offsetCurve(loffset, 1, 2, 5)
                    lay_path = layer.dataProvider().dataSourceUri()
                    if both_sides:
                        print("distance",distance,-distance)
                        parameter={ 'DISTANCE' : distance, 'INPUT' : QgsProcessingFeatureSourceDefinition(lay_path, selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid), 'JOIN_STYLE' : 1, 'MITER_LIMIT' : 2, 'OUTPUT' : 'TEMPORARY_OUTPUT', 'SEGMENTS' : 8 }
                        line1 = processing.run("native:offsetline", parameter)['OUTPUT']
                        # QgsProject.instance().addMapLayer(line1)
                        for feat in line1.getFeatures(): 
                            geom = feat.geometry()
                            fet = QgsVectorLayerUtils.createFeature(layer, geom)
                            fet.setFields(layer.fields(), True)
                        for field in layer.fields():
                            value = feature[field.name()]
                            fet.setAttribute(field.name(), value)
                            pass
                        pr1.addFeatures([fet])

                        parameters={ 'DISTANCE' : -distance, 'INPUT' : QgsProcessingFeatureSourceDefinition(lay_path, selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid), 'JOIN_STYLE' : 1, 'MITER_LIMIT' : 2, 'OUTPUT' : 'TEMPORARY_OUTPUT', 'SEGMENTS' : 8 }
                        line2 = processing.run("native:offsetline", parameters)['OUTPUT']
                        # QgsProject.instance().addMapLayer(line2)
                        for feat in line2.getFeatures(): 
                            geom = feat.geometry()
                            fet = QgsVectorLayerUtils.createFeature(layer, geom)
                            fet.setFields(layer.fields(), True)
                        for field in layer.fields():
                            value = feature[field.name()]
                            fet.setAttribute(field.name(), value)
                            pass
                        pr1.addFeatures([fet])
                        
                        
                    else:
                        parameter={ 'DISTANCE' : distance, 'INPUT' : QgsProcessingFeatureSourceDefinition(lay_path, selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid), 'JOIN_STYLE' : 1, 'MITER_LIMIT' : 2, 'OUTPUT' : 'TEMPORARY_OUTPUT', 'SEGMENTS' : 8 }
                        nline = processing.run("native:offsetline", parameter)['OUTPUT']
                        for feat in nline.getFeatures(): 
                                    geom = feat.geometry()
                                    fet = QgsVectorLayerUtils.createFeature(layer, geom)
                                    fet.setFields(layer.fields(), True)
                        for field in layer.fields():
                            value = feature[field.name()]
                            fet.setAttribute(field.name(), value)
                            pass
                        pr1.addFeatures([fet])
                    
                    
                    layer.commitChanges()
                    mc = self.iface.mapCanvas()
                    layer.removeSelection()
                    mc.refresh()
                    self.iface.messageBar().pushMessage("Success", "Offsets created successfully.", level=Qgis.Success)

            else:
                QMessageBox.critical(self.dlg, "Error", "Please Enter offset distance ")

class OffsetDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Offset Distance")

        # Create input field for distance
        self.distance_input = QDoubleSpinBox(self)
        self.distance_input.setRange(-100000, 100000)
        self.distance_input.setDecimals(4)
        self.distance_input.setSuffix("m")
        
        # Create label
        self.label = QLabel("Enter offset distance :\n"
                            "('-/+' for left/right-side offset)")

        # Create checkbox for both sides offset
        self.both_sides_checkbox = QCheckBox("Offset on both sides")

        # Create dialog buttons
        self.button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, self)

        # Set up layout
        layout = QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.distance_input)
        layout.addWidget(self.both_sides_checkbox)
        layout.addWidget(self.button_box)
        self.setLayout(layout)

        # Connect signals and slots
        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)

    def get_distance(self):
        return self.distance_input.value()

    def is_both_sides(self):
        return self.both_sides_checkbox.isChecked()       

class PointMultiLineTool(QgsMapToolEmitPoint):
    def __init__(self, iface, canvas, line_layer, point_layer):
        super().__init__(canvas)
        self.iface=iface
        self.canvas = canvas
        self.line_layer = line_layer
        self.point_layer = point_layer
        self.points = []
        self.is_drawing = False
        self.temp_rubber_band = QgsRubberBand(self.canvas, QgsWkbTypes.LineGeometry)
        self.temp_rubber_band.setColor(Qt.red)
        self.temp_rubber_band.setWidth(2)
        self.temp_rubber_band.setLineStyle(Qt.DotLine)

        # Ensure the line layer is in editing mode
        if not self.line_layer.isEditable():
            if not self.line_layer.startEditing():
                QMessageBox.warning(None, "Error", "Failed to start editing on line layer.")
                return

        # Check if a point feature is selected
        selected_features = self.point_layer.selectedFeatures()
        if not selected_features:
            QMessageBox.warning(None, "Error", "Please select a point feature on the point layer.")
            return

        # Use the selected point as the first vertex
        first_point_feature = selected_features[0]
        start_point = first_point_feature.geometry().asPoint()
        self.points.append(start_point)
        self.temp_rubber_band.addPoint(start_point)
        self.is_drawing = True

    def canvasReleaseEvent(self, e):
        """Handles the point capture on mouse release."""
        if e.button() == Qt.LeftButton and self.is_drawing:
            # Continue line drawing on right-click
            new_point = self.toMapCoordinates(e.pos())
            self.points.append(new_point)
            self.temp_rubber_band.addPoint(new_point)
            return

        if e.button() == Qt.RightButton and self.is_drawing:
            # End line creation on left-click
            self.end_line_creation()

    def canvasMoveEvent(self, e):
        """Handles the mouse move event to show an instant line preview."""
        if self.is_drawing and self.points:
            # Get the current mouse position
            current_point = self.toMapCoordinates(e.pos())

            # Update the rubber band to show the instant line
            self.temp_rubber_band.movePoint(current_point)

    def end_line_creation(self):
        """Ends the line creation and adds the multiline feature to the layer."""
        if len(self.points) < 2:
            QMessageBox.warning(None, "Error", "A line requires at least two points.")
            return

        # Create a multiline geometry from the points
        multiline_geom = QgsGeometry.fromMultiPolylineXY([self.points])

        # Create a new feature with the multiline geometry
        feature = QgsFeature(self.line_layer.fields())
        feature.setGeometry(multiline_geom)

        # Set the 'id' attribute correctly
        feature.setAttribute('id', self.line_layer.dataProvider().featureCount() + 1)

        # Add the feature to the line layer
        if not self.line_layer.dataProvider().addFeature(feature):
            QMessageBox.warning(None, "Error", "Failed to add feature to layer.")
        else:
            # Refresh the layer and canvas
            self.line_layer.triggerRepaint()
            self.canvas.refresh()
        
            # # Open the attribute table for the new feature
            # feature_id = feature.id()
            # self.line_layer.selectByIds([feature_id])
            # self.iface.showAttributeTable(self.line_layer)

        # Commit changes and reset drawing state
        self.commit_changes()
        self.is_drawing = False
        self.points.clear()
        self.temp_rubber_band.reset(QgsWkbTypes.LineGeometry)

    def commit_changes(self):
        """Commits changes to the line layer and refreshes the canvas."""
        if not self.line_layer.commitChanges():
            QMessageBox.warning(None, "Error", "Failed to commit changes to layer.")
            self.line_layer.rollBack()  # Rollback changes if commit fails
        else:
            self.line_layer.triggerRepaint()
            self.canvas.refresh()

        # Inform the user
        QMessageBox.information(None, "Line Creation", "Line creation has ended.")

        # Unset the map tool
        self.canvas.unsetMapTool(self)

    def deactivate(self):
        """Override deactivate to ensure cleanup."""
        super().deactivate()
        self.is_drawing = False
        self.points.clear()
        self.temp_rubber_band.reset(QgsWkbTypes.LineGeometry)

class StdMultiLineTool(QgsMapToolEmitPoint):
    def __init__(self, canvas, line_layer):
        super().__init__(canvas)
        self.canvas = canvas
        self.line_layer = line_layer
        self.points = []
        self.is_drawing = False
        self.temp_rubber_band = QgsRubberBand(self.canvas, QgsWkbTypes.LineGeometry)
        self.temp_rubber_band.setColor(Qt.red)
        self.temp_rubber_band.setWidth(2)
        self.temp_rubber_band.setLineStyle(Qt.DotLine)

        # Ensure the layer is in editing mode
        if not self.line_layer.isEditable():
            if not self.line_layer.startEditing():
                QMessageBox.warning(None, "Error", "Failed to start editing on layer.")
                return

    def canvasReleaseEvent(self, e):
        """Handles the point capture on mouse release."""
        if e.button() == Qt.LeftButton:
            if not self.is_drawing:
                # Start drawing on the first right-click
                self.is_drawing = True
                start_point = self.toMapCoordinates(e.pos())
                self.points.append(start_point)
                self.temp_rubber_band.addPoint(start_point)
            else:
                # End drawing on the second right-click
                end_point = self.toMapCoordinates(e.pos())
                self.points.append(end_point)
                self.temp_rubber_band.addPoint(end_point)
                
            return

        if e.button() == Qt.RightButton and self.is_drawing:
            # Capture left-click for additional points
            
            self.end_line_creation()

    def canvasMoveEvent(self, e):
        """Handles the mouse move event to show an instant line preview."""
        if self.is_drawing and self.points:
            # Get the current mouse position
            current_point = self.toMapCoordinates(e.pos())

            # Update the rubber band to show the instant line
            self.temp_rubber_band.movePoint(current_point)

    def end_line_creation(self):
        """Ends the line creation and adds the multiline feature to the layer."""
        if len(self.points) < 2:
            QMessageBox.warning(None, "Error", "A line requires at least two points.")
            return

        # Create a multiline geometry from the points
        multiline_geom = QgsGeometry.fromMultiPolylineXY([self.points])

        # Create a new feature with the multiline geometry
        feature = QgsFeature(self.line_layer.fields())
        feature.setGeometry(multiline_geom)

        # Set the 'id' attribute correctly
        feature.setAttribute('id', self.line_layer.dataProvider().featureCount() + 1)

        # Add the feature to the line layer
        if not self.line_layer.dataProvider().addFeature(feature):
            QMessageBox.warning(None, "Error", "Failed to add feature to layer.")
        else:
            # Refresh the layer and canvas
            self.line_layer.triggerRepaint()
            self.canvas.refresh()

        # Commit changes and reset drawing state
        self.commit_changes()
        self.is_drawing = False
        self.points.clear()
        self.temp_rubber_band.reset(QgsWkbTypes.LineGeometry)

    def commit_changes(self):
        """Commits changes to the line layer and refreshes the canvas."""
        if not self.line_layer.commitChanges():
            QMessageBox.warning(None, "Error", "Failed to commit changes to layer.")
            self.line_layer.rollBack()  # Rollback changes if commit fails
        else:
            self.line_layer.triggerRepaint()
            self.canvas.refresh()

        # Inform the user
        QMessageBox.information(None, "Line Creation", "Line creation has ended.")

        # Unset the map tool
        self.canvas.unsetMapTool(self)

    def deactivate(self):
        """Override deactivate to ensure cleanup."""
        super().deactivate()
        self.is_drawing = False
        self.points.clear()
        self.temp_rubber_band.reset(QgsWkbTypes.LineGeometry)



class LineCreationTool(QgsMapTool):
    def __init__(self, iface, line_layer):
        super().__init__(iface.mapCanvas())
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.line_layer = line_layer
        self.rubber_band = QgsRubberBand(self.canvas, QgsWkbTypes.LineGeometry)  # Use QgsWkbTypes.LineGeometry
        self.rubber_band.setColor(Qt.red)
        self.rubber_band.setWidth(2) 
        self.start_point = None
        self.distance = None
    
    def canvasPressEvent(self, event):
        if event.button() == Qt.LeftButton:
            if self.start_point is None:
                # Start point
                self.start_point = self.toMapCoordinates(event.pos())
                self.rubber_band.addPoint(self.start_point)
            else:
                # If a line is already started, reset the rubber band for a new line
                self.rubber_band.reset()
                self.start_point = self.toMapCoordinates(event.pos())
                self.rubber_band.addPoint(self.start_point)
        elif event.button() == Qt.RightButton and self.start_point:
            # End point
            end_point = self.toMapCoordinates(event.pos())
            self.rubber_band.addPoint(end_point)
            self.create_feature(self.start_point, end_point)
            self.rubber_band.reset()  # Reset for the next line creation
            self.start_point = None

    def get_point_by_distance(self, start_point, distance):
        import math
        angle = 0  # Change this if you need a specific angle
        end_x = start_point.x() + distance * math.cos(math.radians(angle))
        end_y = start_point.y() + distance * math.sin(math.radians(angle))
        return QgsPointXY(end_x, end_y)

    def create_feature(self, start_point, end_point):
        line_geometry = QgsGeometry.fromPolylineXY([start_point, end_point])
        feature = QgsFeature(self.line_layer.fields())
        feature.setGeometry(line_geometry)
        self.line_layer.startEditing()
        self.line_layer.addFeature(feature)
        self.line_layer.commitChanges()

    def set_distance(self, distance):
        self.distance = distance

